--- lib/AxKit.pm_orig	Fri Mar 15 14:37:52 2002
+++ lib/AxKit.pm	Fri Apr 26 18:33:14 2002
@@ -387,9 +387,62 @@
         return SERVER_ERROR;
     }
     
-    die "Unknown exception, " . (ref($E)?"type: ".ref($E):"message is: $E");
+	# added by pflanze; handle other exceptions nicely
+	if (ref $E) {
+		if (my $ref= $E->can("as_errorxml")) {
+    		# almost-copy from above
+			my $error_styles = $AxKit::Cfg->ErrorStyles;
+    		if (@$error_styles) {
+				return process_xmlerror($r, &$ref($E), $error_styles);
+    		}
+			return SERVER_ERROR;
+		} else {
+			# rethrow
+			if (my $ref= $E->can("rethrow") || $E->can("throw")) {
+				&$ref($E)
+			} else {
+				die $E
+			}
+		}
+	} else {
+		#die "Unknown exception, " . (ref($E)?"type: ".ref($E):"message is: $E");
+		$@=$E;
+		die; # appends nice '...propagated' string
+	}
+    #return DECLINED; -> dead code
+}
+
+sub process_xmlerror { # added by pflanze; identical to process_error except that $error is already made
+    my ($r, $error, $error_styles) = @_;
     
-    return DECLINED;
+    bless $r, 'AxKit::Apache';
+    tie *STDOUT, 'AxKit::Apache', $r;
+
+    $r->dir_config->set(AxNoCache => 1);
+    $AxKit::Cache = Apache::AxKit::Cache->new($r, 'error', '', '', '');
+    
+    $r->content_type("text/html; charset=UTF-8"); # set a default for errors
+
+    my $provider = Apache::AxKit::Provider::Scalar->new(
+            $r, $error, $error_styles
+            );
+
+    $r->pnotes('xml_string', $error);
+
+    eval {
+        process_request($r, $provider, $error_styles);
+        if (ref($r) eq 'AxKit::Apache') {
+            bless $r, 'Apache';
+            tie *STDOUT, 'Apache', $r;
+        }
+        deliver_to_browser($r);
+    };
+    if ($@) {
+        $r->log->error("[AxKit] [FATAL] Error occured while processing Error XML: $@");
+        return SERVER_ERROR;
+    }
+    
+    return OK;
 }
 
 sub process_error {
