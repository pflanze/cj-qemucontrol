#!/usr/bin/perl -w

use strict;
BEGIN {
	$0=~ /(.*?)([^\/]*)$/s;
	unshift @INC, $1;
	require 'newperl.lib';
}



sub usage {
	$0=~ /([^\/]*)$/;
	print "$1 Some::Module | som/where/Some::Module | Some/Module[.pm] | /some/path/mymodule
      [ -b[ase] Some::Baseclass | Some/BaseClass[.pm] ]

  Creates and opens new perl module file in \$EDITOR, suitable
  for use of the Class::Array OO perl module.
";
	exit;
}

usage() unless @ARGV;

my $baseclass="";
for (my $i=0; $i<@ARGV; $i++) {
	if ($ARGV[$i]=~ /^--?b(ase)?(class)?$/) {
		$baseclass= $ARGV[$i+1] or usage();
		splice @ARGV, $i,2;
		$i--;
		$baseclass=~ s|/|::|sg;
		$baseclass=~ s|\.pm$||;
	}
}


my @paths;
for (@ARGV) {
	if (/^--?h(elp)?$/) {
		usage();
	} else {
		# which is the path, which the namespace?
		if ( /(.*?)((?:\w+::)*\w+)(?:\.pm)?$/ ) {
			my ($path,$ns)=($1,$2);
			$path.=join("/",split(/::/,$ns));
			if ($ns!~ /::/ and $path!~ /^\//) {
				# seems the user has used slashes instead of ::
				$ns= $path;
				$ns=~ s|/|::|g;
			}
			$path.=".pm";
			create ($path,$ns);
		} else {
			warn "Don't know what to do with '$_'.\n";
			usage();
		}
	}
}

edit (25, @paths);


sub create {
	my ($path,$namespace)=@_; # global: $baseclass
	
	my $baseclassdefs= 
		$baseclass ? "
use $baseclass
-extend=> qw(
	
);
" : "
use Class::Array 
-fields=> qw(
	
); 
";

	if (-e $path) {
		warn "File $path already exists!\n";
		push @paths,$path;# edit the old file
	} else {
		$path=~ /(.*?)[^\/]*$/ or die;
		my $folder= $1;
		if (length $folder) {
			if (-d $folder) {
				# ok
			} else {
				$|=1;
				print "The folder '$folder' does not exist. Create it? [y/n] ";
				my $a=<STDIN>;
				if ($a=~ /^[jy]/) {
					system "/bin/mkdir",$folder;
				} else {
					warn "Cancel.\n";
					return;
				}
			}
		}
		if (open OUT,">$path") {
			my $copy= copy();
			print OUT <<"END" or warn "Error while writing: $!";
package $namespace;

$copy
#
# \$Id\$

=head1 NAME

$namespace 

=head1 DESCRIPTION


=cut


use strict;
$baseclassdefs
#use vars qw();

sub new {
	my \$class=shift;
	my \$self= \$class->SUPER::new;
	# (Alternatively, in case this class is the base class and will remain so:)
	# my \$self = bless [], \$class;
	# çç strip the whole sub if nothing needs to be done here
	\$self
}

sub DESTROY {
	my \$self=shift;
	# çç strip the whole sub if nothing needs to be done here
	\$self->SUPER::DESTROY;
}

1;
END

			close OUT;
			push @paths,$path;
		} else {
			warn "Could not open file '$path': $!\n";
		}
	}
}

